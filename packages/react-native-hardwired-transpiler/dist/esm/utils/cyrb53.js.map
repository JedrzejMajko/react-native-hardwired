{"version":3,"file":"cyrb53.js","names":["module","exports","str","seed","h1","h2","i","ch","length","charCodeAt","Math","imul"],"sources":["../../../src/utils/cyrb53.js"],"sourcesContent":["/*\n    cyrb53 (c) 2018 bryc (github.com/bryc)\n    License: Public domain. Attribution appreciated.\n    A fast and simple 53-bit string hash function with decent collision resistance.\n    Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.\n*/\nmodule.exports = function (str) {\n  const seed = 0;\n  let h1 = 0xdeadbeef ^ seed,\n    h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507);\n  h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507);\n  h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAE;EAC9B,MAAMC,IAAI,GAAG,CAAC;EACd,IAAIC,EAAE,GAAG,UAAU,GAAGD,IAAI;IACxBE,EAAE,GAAG,UAAU,GAAGF,IAAI;EACxB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEC,EAAE,EAAED,CAAC,GAAGJ,GAAG,CAACM,MAAM,EAAEF,CAAC,EAAE,EAAE;IACvCC,EAAE,GAAGL,GAAG,CAACO,UAAU,CAACH,CAAC,CAAC;IACtBF,EAAE,GAAGM,IAAI,CAACC,IAAI,CAACP,EAAE,GAAGG,EAAE,EAAE,UAAU,CAAC;IACnCF,EAAE,GAAGK,IAAI,CAACC,IAAI,CAACN,EAAE,GAAGE,EAAE,EAAE,UAAU,CAAC;EACrC;EACAH,EAAE,GAAGM,IAAI,CAACC,IAAI,CAACP,EAAE,GAAIA,EAAE,KAAK,EAAG,EAAE,UAAU,CAAC;EAC5CA,EAAE,IAAIM,IAAI,CAACC,IAAI,CAACN,EAAE,GAAIA,EAAE,KAAK,EAAG,EAAE,UAAU,CAAC;EAC7CA,EAAE,GAAGK,IAAI,CAACC,IAAI,CAACN,EAAE,GAAIA,EAAE,KAAK,EAAG,EAAE,UAAU,CAAC;EAC5CA,EAAE,IAAIK,IAAI,CAACC,IAAI,CAACP,EAAE,GAAIA,EAAE,KAAK,EAAG,EAAE,UAAU,CAAC;EAC7C,OAAO,UAAU,IAAI,OAAO,GAAGC,EAAE,CAAC,IAAID,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC"}